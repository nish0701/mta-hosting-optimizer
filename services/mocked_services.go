// Code generated by MockGen. DO NOT EDIT.
// Source: mta-hosting-optimizer/services (interfaces: DataService)

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataService is a mock of DataService interface.
type MockDataService struct {
	ctrl     *gomock.Controller
	recorder *MockDataServiceMockRecorder
}

// MockDataServiceMockRecorder is the mock recorder for MockDataService.
type MockDataServiceMockRecorder struct {
	mock *MockDataService
}

// NewMockDataService creates a new mock instance.
func NewMockDataService(ctrl *gomock.Controller) *MockDataService {
	mock := &MockDataService{ctrl: ctrl}
	mock.recorder = &MockDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataService) EXPECT() *MockDataServiceMockRecorder {
	return m.recorder
}

// GetData mocks base method.
func (m *MockDataService) GetData() []IpConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].([]IpConfig)
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockDataServiceMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockDataService)(nil).GetData))
}

// PopulateData mocks base method.
func (m *MockDataService) PopulateData() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PopulateData")
}

// PopulateData indicates an expected call of PopulateData.
func (mr *MockDataServiceMockRecorder) PopulateData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulateData", reflect.TypeOf((*MockDataService)(nil).PopulateData))
}
